namespace Application.Core
{
    using System;
    using UnityEngine;
    using UnityEngine.Events;

    /// <summary>
    /// Different types of collision that can be registered by a trigger.
    /// </summary>
    public enum CollisionType
    {
        /// <summary>
        /// A rigidbody.
        /// </summary>
        Rigidbody,

        /// <summary>
        /// A collider.
        /// </summary>
        Collider,
    }

    /// <summary>
    /// A trigger that hooks into the weird hierarchy structure generated by RealtimeCSG triggers.
    /// </summary>
    public class RealtimeCsgTrigger : Trigger
    {
        [SerializeField]
        private CollisionType collisionType = CollisionType.Collider;

        [SerializeField]
        [Tooltip("Called when an object enters the trigger.")]
        private UnityEvent<GameObject> onEnter;

        [SerializeField]
        [Tooltip("Which layers should be excluded from activating this trigger?")]
        private LayerMask excludeLayers;

        private TriggerEvents _triggerEvents;

        /// <inheritdoc/>
        public override event Action<GameObject> CollisionEnter;

        /// <inheritdoc/>
        public override event Action<GameObject> CollisionExit;

        private void Awake()
        {
            _triggerEvents = GetComponentInChildren<Collider>()
                .GetTriggerEvents();

            _triggerEvents.ExcludeLayers = excludeLayers;
        }

        private void OnEnable()
        {
            switch (collisionType)
            {
                case CollisionType.Rigidbody:
                    _triggerEvents.RigidbodyTriggerEnter += HandleEnter;
                    _triggerEvents.RigidbodyTriggerExit += HandleExit;
                    break;
                case CollisionType.Collider:
                    _triggerEvents.ColliderTriggerEnter += HandleEnter;
                    _triggerEvents.ColliderTriggerExit += HandleExit;
                    break;
                default: throw new ArgumentOutOfRangeException(string.Empty);
            }
        }

        private void OnDisable()
        {
            _triggerEvents.RigidbodyTriggerEnter -= HandleEnter;
            _triggerEvents.RigidbodyTriggerExit -= HandleExit;
            _triggerEvents.ColliderTriggerEnter -= HandleEnter;
            _triggerEvents.ColliderTriggerExit -= HandleExit;
        }

        private void HandleEnter(Component rb)
        {
            CollisionEnter?.Invoke(rb.gameObject);
            onEnter.Invoke(rb.gameObject);
        }

        private void HandleExit(Component rb)
        {
            CollisionExit?.Invoke(rb.gameObject);
        }
    }
}
